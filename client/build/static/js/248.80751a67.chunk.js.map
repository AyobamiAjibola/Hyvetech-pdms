{"version":3,"file":"static/js/248.80751a67.chunk.js","mappings":"2MAaA,GATuBA,EAAAA,EAAAA,aAAW,SAChCC,EAGAC,GAEA,OAAO,SAACC,EAAA,GAAD,QAAOC,UAAU,OAAOF,IAAKA,GAASD,GAC9C,ICNc,SAASI,EAASJ,GAC/B,MAA4BA,EAApBK,SAAAA,OAAR,MAAmB,IAAnB,EACA,OACE,SAACC,EAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,KAAMV,EAAMW,KACZC,iBAAkBP,EAClBQ,QAASb,EAAMa,QACfC,oBAAqBC,EALvB,UAOE,SAACC,EAAA,EAAD,CAAOH,QAASb,EAAMa,QAASI,QAAQ,SAASC,SAAUlB,EAAMmB,UAAWC,GAAI,CAAEC,MAAO,QAAxF,SACGrB,EAAMsB,WAFJtB,EAAMsB,QAMhB,C,uECLD,IAAMC,EAAQ,CACZC,MAAO,OAGT,IAVA,SAAoBxB,GAClB,OAAQA,EAAMyB,UACZ,SAAC,IAAD,CAAgBL,IAAE,kBAAOG,GAAUvB,EAAM0B,aAAzC,SAAyD1B,EAAMsB,UADxC,IAG1B,C,6JCkBKK,EAAY,CAChBC,WAAY,CACVL,MAAO,CACLM,UAAWC,IACXT,MAAO,OAKE,SAASU,EAAY/B,GAClC,OAA4BgC,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAEhB,OACE,UAAC,IAAD,CAAWd,GAAIpB,EAAMmC,gBAArB,WACE,UAAC,IAAD,CACEC,UAAWpC,EAAMoC,UAEjBC,MAAOJ,EAAOjC,EAAMsC,OAASJ,EAAQlC,EAAMsC,MAH7C,WAIE,SAAC,IAAD,CAAYC,GAAIvC,EAAMsC,KAAtB,SAA6BtC,EAAMwC,SACnC,UAAC,IAAD,CACEC,SAAUzC,EAAMyC,SAChBrB,GAAIpB,EAAM0C,eACVC,KAAM3C,EAAM2C,KACZC,QAAS5C,EAAMsC,KACfO,SAAU7C,EAAM6C,SAChBN,GAAIvC,EAAMsC,KACVQ,MAAO9C,EAAM8C,MACbR,KAAMtC,EAAMsC,KACZE,MAAOxC,EAAMwC,MACbO,SAAU/C,EAAM+C,SAChBpB,UAAWA,EAXb,WAYE,SAAC,IAAD,CAAUmB,MAAM,GAAhB,iBACC9C,EAAMgD,KAAKC,KAAI,SAACC,EAAMC,GACrB,OACE,SAAC,IAAD,CACEC,QAAS,WACHpD,EAAMoD,SAASpD,EAAMoD,QAAQF,EAClC,EAEDJ,MAAOI,EAAKJ,MALd,SAMGI,EAAKV,OAFDW,EAKV,WAGL,SAAC,IAAD,CACEzB,YAAa1B,EAAM0B,YAEnBJ,QAASW,EAAOjC,EAAMsC,MAEtBb,SAAUQ,EAAOjC,EAAMsC,OAASJ,EAAQlC,EAAMsC,UAIrD,C,wGCzCD,IAzBA,SAAwBtC,GACtB,OAA4BgC,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAEhB,OACE,UAAC,IAAD,CAAWd,GAAIpB,EAAMmC,gBAArB,WACE,SAAC,KAAD,QACEQ,KAAM3C,EAAM2C,KACZU,OAAQrD,EAAMqD,OACdjC,GAAIpB,EAAM0C,eACVN,UAAWpC,EAAMoC,UAEjBC,MAAOJ,EAAOjC,EAAMsC,OAASJ,EAAQlC,EAAMsC,OACvCtC,KAEN,SAAC,IAAD,CACE0B,YAAa1B,EAAM0B,YAEnBJ,QAASW,EAAOjC,EAAMsC,MAEtBb,SAAUQ,EAAOjC,EAAMsC,OAASJ,EAAQlC,EAAMsC,UAIrD,C,2BCxCKgB,E,SAAoCC,GAE1C,K,8MCQMC,EAAS,CACbC,UAAW,CACTnB,KAAM,YACNE,MAAO,cACPH,MAAO,CACLqB,QAAS,sBACTC,SAAU,4BAGdC,SAAU,CACRtB,KAAM,WACNE,MAAO,aACPH,MAAO,CACLqB,QAAQ,qBACRC,SAAU,2BAGdrB,KAAM,CACJA,KAAM,OACNE,MAAO,+BACPH,MAAO,CACLqB,QAAS,kCACTC,SAAU,wCAGdE,MAAO,CACLvB,KAAM,QACNE,MAAO,sBACPH,MAAO,CACLqB,QAAS,iBACTC,SAAU,uBAGdG,MAAO,CACLxB,KAAM,QACNE,MAAO,gBACPH,MAAO,CACLqB,QAAQ,wBACRC,SAAS,0BAGbI,SAAU,CACRzB,KAAM,WACNE,MAAO,aACPH,MAAO,CACLqB,QAAQ,oBACRC,SAAS,sBAIbK,MAAO,CACL1B,KAAM,QACNE,MAAO,uCACPH,MAAO,CACLqB,QAAQ,yBACRC,SAAU,sBAGdM,aAAc,CACZ3B,KAAM,eACNE,MAAO,oCACPH,MAAO,CACLqB,QAAQ,yBACRC,SAAU,gCAgDhB,EAN0B,CACxBH,OAAAA,EACAU,cAvCwC,CACxCL,MAAO,GACPJ,UAAW,GACXG,SAAU,GACVE,MAAO,GACPC,SAAU,GACVzB,KAAM,GACN0B,MAAO,GACPC,cAAc,GAgCdE,OA7BaC,EAAAA,KAAaC,OAAb,eACZb,EAAOC,UAAUnB,KAAO8B,EAAAA,KACtBE,IAAI,GAAId,EAAOC,UAAUpB,MAAMqB,SAC/BlB,MAAMgB,EAAOC,UAAUjB,OACvBmB,SAASH,EAAOC,UAAUpB,MAAMsB,YAJtB,SAKZH,EAAOI,SAAStB,KAAO8B,EAAAA,KACrBE,IAAI,GAAId,EAAOI,SAASvB,MAAMqB,SAC9BlB,MAAMgB,EAAOI,SAASpB,OACtBmB,SAASH,EAAOI,SAASvB,MAAMsB,YARrB,SASZH,EAAOlB,KAAKA,KAAO8B,EAAAA,KAAaT,SAASH,EAAOlB,KAAKD,MAAMsB,UAAUnB,MAAMgB,EAAOlB,KAAKE,SAT3E,SAUZgB,EAAOK,MAAMvB,KAAO8B,EAAAA,KAClBP,MAAML,EAAOK,MAAMxB,MAAMqB,SACzBlB,MAAMgB,EAAOK,MAAMrB,OACnBmB,SAASH,EAAOK,MAAMxB,MAAMsB,YAblB,SAcZH,EAAOM,MAAMxB,KAAO8B,EAAAA,KAClBG,OAAO,GAAIf,EAAOM,MAAMzB,MAAMqB,SAC9BC,SAASH,EAAOM,MAAMzB,MAAMsB,UAC5BnB,MAAMgB,EAAOM,MAAMtB,SAjBT,SAkBZgB,EAAOO,SAASzB,KAAO8B,EAAAA,KAAaT,SAASH,EAAOO,SAAS1B,MAAMsB,UAAUnB,MAAMgB,EAAOO,SAASvB,SAlBvF,SAmBZgB,EAAOQ,MAAM1B,KAAO8B,EAAAA,KAAa5B,MAAMgB,EAAOQ,MAAMxB,OAAOmB,SAASH,EAAOQ,MAAM3B,MAAMsB,YAnB3E,SAoBZH,EAAOS,aAAa3B,KAAO8B,EAAAA,KACzBI,MAAM,EAAC,GAAOhB,EAAOS,aAAa5B,MAAMsB,UACxCnB,MAAMgB,EAAOS,aAAazB,OAC1BmB,SAASH,EAAOS,aAAa5B,MAAMsB,WAvBzB,K,6EC5Cf,MAhCA,SAAuB3D,GACrB,OAA2CgC,EAAAA,EAAAA,MAAnCC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAASuC,EAAzB,EAAyBA,cAMnBhD,EAAW,uBAEQiD,IAAvBzC,EAAOjC,EAAMsC,OAAuBJ,EAAQlC,EAAMsC,KAFnC,EAIjB,OACE,UAACqC,EAAA,EAAD,CACEhB,SAAU3D,EAAM2D,SAChBvB,UAAWpC,EAAMoC,UACjBC,MAAOZ,IACPmD,UAAU,WACV3D,QAAQ,WALV,WAME,SAAC4D,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CACEC,SAAS,SAACC,EAAA,EAAD,CAAUrC,KAAM3C,EAAM2C,KAAMsC,QAASjF,EAAM8C,MAAOC,SAjB9C,SAACmC,GACpBT,EAAczE,EAAMsC,KAAM4C,EAAEC,OAAOF,QACpC,EAe0F3C,KAAMtC,EAAMsC,OAC/FE,MAAOxC,EAAMwC,UAKff,MAAc,SAAC2D,EAAA,EAAD,UAAiBnD,EAAOjC,EAAMsC,UAInD,E,iCC9BOkB,G,SAAW6B,EAAAA,QAoInB,MAlIA,SAA0BrF,GACxB,OAA4BsF,EAAAA,EAAAA,UAAwB,IAApD,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,UAAwB,IAA1D,eAAOG,EAAP,KAAkBC,EAAlB,KAEA,GAAiC1D,EAAAA,EAAAA,MAAzB2D,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,OAiBtB,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAYC,EAAAA,GAAAA,KAAW,SAAA/B,GAAK,MAAK,CACrCxB,MAAOwB,EAAM1B,KACbQ,MAAOkB,EAAM1B,KAFmB,IAK5B0D,EAAeC,EAAAA,GAAAA,QAAkB,SAAAC,GAAI,MAAkB,YAAdA,EAAK5D,IAAT,IAA6BW,KAAI,SAAAc,GAAQ,MAAK,CACvFjB,MAAOiB,EAASoC,UAChB3D,MAAM,GAAD,OAAKuB,EAASqC,MAAd,YAAuBrC,EAASoC,WAF6C,IAKpFX,EAAUM,GACVJ,EAAaM,EACd,GAAE,KAGD,SAAC,KAAD,CAAMK,aAAa,MAAMC,UAAU,gBAAnC,UACE,UAACC,EAAA,GAAD,CAAMC,WAAS,EAACrG,UAAU,SAA1B,WACE,UAACoG,EAAA,GAAD,CAAMrD,MAAI,EAACsD,WAAS,EAACC,GAAI,GAAIC,cAAe,EAA5C,WACE,SAACH,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,EAAf,UACE,SAACE,EAAA,EAAD,CACEC,OAAO,SACP7D,SAAU4C,EACV7C,MAAO8C,EAAOnC,UACdnB,KAAMkB,EAAOC,UAAUnB,KACvBE,MAAOgB,EAAOC,UAAUjB,WAG5B,SAAC+D,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,EAAf,UACE,SAACE,EAAA,EAAD,CACEC,OAAO,SACP7D,SAAU4C,EACV7C,MAAO8C,EAAOhC,SACdtB,KAAMkB,EAAOI,SAAStB,KACtBE,MAAOgB,EAAOI,SAASpB,cAI7B,SAAC+D,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,GAAf,UACE,SAACE,EAAA,EAAD,CACEC,OAAO,SACP7D,SAAU4C,EACV7C,MAAO8C,EAAOtD,KACdA,KAAMkB,EAAOlB,KAAKA,KAClBE,MAAOgB,EAAOlB,KAAKE,WAGvB,SAAC+D,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,GAAf,UACE,SAACE,EAAA,EAAD,CACEC,OAAO,SACP7D,SAAU4C,EACV7C,MAAO8C,EAAO/B,MACdvB,KAAMkB,EAAOK,MAAMvB,KACnBE,MAAOgB,EAAOK,MAAMrB,MACpBqE,KAAK,aAGT,UAACN,EAAA,GAAD,CAAMrD,MAAI,EAACsD,WAAS,EAACC,GAAI,GAAIK,QAAS,EAAGC,GAAI,EAA7C,WACE,SAACR,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,EAAf,UACE,SAAC1E,EAAA,EAAD,CACEgB,SAAU4C,EACV7C,MAAO8C,EAAO7B,SACdzB,KAAMkB,EAAOO,SAASzB,KACtBE,MAAOgB,EAAOO,SAASvB,MACvBQ,KAAMyC,OAGV,SAACc,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,EAAf,UACE,SAACE,EAAA,EAAD,CACE5D,SAAU4C,EACV7C,MAAO8C,EAAO9B,MACdxB,KAAMkB,EAAOM,MAAMxB,KACnBE,MAAOgB,EAAOM,MAAMtB,cAI1B,SAAC+D,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,GAAIM,GAAI,EAAvB,UACE,SAAChF,EAAA,EAAD,CACEgB,SAAU4C,EACV7C,MAAO8C,EAAO5B,MACd1B,KAAMkB,EAAOQ,MAAM1B,KACnBE,MAAOgB,EAAOQ,MAAMxB,MACpBQ,KAAMuC,EACNnD,WAAS,OAGb,SAACmE,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,GAAIM,GAAI,EAAvB,UACE,SAAC,EAAD,CACEpD,UAAQ,EACRb,MAAO8C,EAAO3B,aACd3B,KAAMkB,EAAOS,aAAa3B,KAC1BE,MAAOgB,EAAOS,aAAazB,WAI/B,UAAC+D,EAAA,GAAD,CAAMrD,MAAI,EAACsD,WAAS,EAACC,IAAE,EAACK,QAAS,EAAGE,eAAe,gBAAgBC,WAAW,SAA9E,WACE,SAACV,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,EAAf,UACE,SAAC,KAAD,CAAMlF,MAAO,CAAEC,MAAO,WAAa0F,GAAG,gBAAtC,gCAIF,SAACX,EAAA,GAAD,CAAMrD,MAAI,EAAV,UACE,SAACiE,EAAA,EAAD,CACEC,QAASpH,EAAMqH,aACf5E,SAAUzC,EAAMqH,aAChBR,KAAK,SACL5F,QAAQ,YACRO,MAAM,UACNmB,KAAK,QANP,2BAYJ,SAAC4D,EAAA,GAAD,CAAMrD,MAAI,EAACuD,GAAI,GAAIa,GAAI,EAAvB,UACE,SAACC,EAAA,EAAD,CAAYC,UAAU,SAAtB,kGAOT,E,sDClIOrD,EAA0BkB,EAAAA,OAAlBnB,EAAkBmB,EAAAA,cAwDlC,IAAMoC,EAAgB,CACpBC,WAAY,UACZC,UAAW,SACXC,WAAY,MACZC,SAAU,OACVC,GAAI,QAGN,EA9DA,WACE,OAA8BxC,EAAAA,EAAAA,YAA9B,eAAOyC,EAAP,KAAgBC,EAAhB,KACA,GAA0B1C,EAAAA,EAAAA,YAA1B,eAAOjD,EAAP,KAAc4F,EAAd,KAEMC,GAAwBC,EAAAA,EAAAA,IAAe,SAAAnE,GAAK,OAAIA,EAAMkE,qBAAV,IAC5CE,GAAW9E,EAAAA,EAAAA,KAkBjB,OAhBAuC,EAAAA,EAAAA,YAAU,WACyC,WAA7CqC,EAAsBG,oBACxBJ,EAAS,CAAE3G,QAAS4G,EAAsBI,mBAE7C,GAAE,CAACJ,EAAsBI,kBAAmBJ,EAAsBG,sBAEnExC,EAAAA,EAAAA,YAAU,WACyC,cAA7CqC,EAAsBG,oBACxBL,EAAW,CAAE1G,QAAS4G,EAAsBK,qBAE/C,GAAE,CAACL,EAAsBK,oBAAqBL,EAAsBG,sBAOnE,UAACG,EAAA,EAAD,YACE,gBAAKC,IAAKC,EAAWC,IAAI,GAAGrC,UAAU,eACtC,UAACsC,EAAA,EAAD,CAAKxH,GAAI,CAAE0G,GAAI,GAAf,WACE,SAACP,EAAA,EAAD,CAAYC,UAAU,SAASpG,GAAIqG,EAAnC,2CAGA,SAACF,EAAA,EAAD,CAAYC,UAAU,SAASvG,QAAQ,YAAvC,+DAIF,SAAC,KAAD,CAAQ4H,iBAAkB1E,EAAQD,cAAeA,EAAe4E,SAf/C,SAAClD,EAA4BmD,GAC3CX,GAASY,EAAAA,EAAAA,IAAmBpD,IACjCmD,EAAQE,WACT,EAYG,UACE,SAAC,EAAD,OAEF,SAAC7I,EAAA,EAAD,CACEe,UAAU,QACVR,UAAgB+D,IAAVrC,EACNf,QAAO,OAAEe,QAAF,IAAEA,OAAF,EAAEA,EAAOf,QAChBT,QAAS,kBAAMoH,OAASvD,EAAf,KAEX,SAACtE,EAAA,EAAD,CACEe,UAAU,UACVR,UAAkB+D,IAAZqD,EACNzG,QAAO,OAAEyG,QAAF,IAAEA,OAAF,EAAEA,EAASzG,QAClBT,QAAS,kBAAMmH,OAAWtD,EAAjB,KAEX,SAACwE,EAAA,EAAD,CAAWvI,KAAmD,YAA7CuH,EAAsBG,uBAG5C,C","sources":["components/transitions/TransitionLeft.tsx","components/alerts/AppAlert.tsx","components/forms/fields/ErrorField.tsx","components/forms/fields/SelectField.tsx","components/forms/fields/TextInputField.tsx","hooks/useAppDispatch.ts","components/forms/models/garageSignUpModel.ts","components/forms/fields/CheckboxField.tsx","components/forms/authentication/GarageSignUpForm.tsx","pages/authentication/GarageSignUpPage.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { TransitionProps } from '@mui/material/transitions';\nimport { Slide } from '@mui/material';\n\nconst TransitionLeft = forwardRef(function Transition(\n  props: TransitionProps & {\n    children: React.ReactElement<any, any>;\n  },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"left\" ref={ref} {...props} />;\n});\n\nexport default TransitionLeft;\n","import React from 'react';\nimport { Alert, Snackbar } from '@mui/material';\nimport { CallableFunction } from '@app-types';\nimport TransitionLeft from '../transitions/TransitionLeft';\n\nexport default function AppAlert(props: AppAlertProps) {\n  const { duration = 3000 } = props;\n  return (\n    <Snackbar\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={props.show}\n      autoHideDuration={duration}\n      onClose={props.onClose}\n      TransitionComponent={TransitionLeft}\n      key={props.message}>\n      <Alert onClose={props.onClose} variant=\"filled\" severity={props.alertType} sx={{ width: '100%' }}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  );\n}\n\ninterface AppAlertProps {\n  alertType: 'success' | 'info' | 'warning' | 'error';\n  show: boolean;\n  message: any;\n  onClose: CallableFunction;\n  duration?: number;\n}\n","import React from 'react';\nimport { FormHelperText } from '@mui/material';\n\ninterface IErrorField {\n  helperStyle?: { [p: string]: string };\n  message: string;\n  hasError: boolean;\n}\n\nfunction ErrorField(props: IErrorField) {\n  return !props.hasError ? null : (\n    <FormHelperText sx={{ ...style, ...props.helperStyle }}>{props.message}</FormHelperText>\n  );\n}\n\nconst style = {\n  color: 'red',\n};\n\nexport default ErrorField;\n","import React, { FocusEvent } from 'react';\nimport { useFormikContext } from 'formik';\nimport { FormControl, FormGroup, InputLabel, MenuItem, Select, SelectChangeEvent } from '@mui/material';\nimport ErrorField from './ErrorField';\n\nexport interface ISelectData {\n  label: string;\n  value: string;\n}\n\ninterface ISelectFieldProps {\n  inputGroupStyle?: { [p: string]: string };\n  textInputStyle?: { [p: string]: string };\n  helperStyle?: { [p: string]: string };\n  fullWidth?: boolean;\n  size?: 'small' | 'medium';\n  multiple?: boolean;\n  onChange: (event: SelectChangeEvent<any>) => void;\n  onBlur?: (event: FocusEvent<any>) => void;\n  value: any;\n  name: string;\n  label: string;\n  data: ISelectData[];\n  onClick?: (params?: ISelectData) => void;\n  disabled?: boolean;\n\n  [p: string]: any;\n}\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nexport default function SelectField(props: ISelectFieldProps) {\n  const { errors, touched } = useFormikContext();\n\n  return (\n    <FormGroup sx={props.inputGroupStyle}>\n      <FormControl\n        fullWidth={props.fullWidth}\n        // @ts-ignore\n        error={errors[props.name] && touched[props.name]}>\n        <InputLabel id={props.name}>{props.label}</InputLabel>\n        <Select\n          disabled={props.disabled}\n          sx={props.textInputStyle}\n          size={props.size}\n          labelId={props.name}\n          multiple={props.multiple}\n          id={props.name}\n          value={props.value}\n          name={props.name}\n          label={props.label}\n          onChange={props.onChange}\n          MenuProps={MenuProps}>\n          <MenuItem value=\"\">...</MenuItem>\n          {props.data.map((item, index) => {\n            return (\n              <MenuItem\n                onClick={() => {\n                  if (props.onClick) props.onClick(item);\n                }}\n                key={index}\n                value={item.value}>\n                {item.label}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n      <ErrorField\n        helperStyle={props.helperStyle}\n        // @ts-ignore\n        message={errors[props.name]}\n        // @ts-ignore\n        hasError={errors[props.name] && touched[props.name]}\n      />\n    </FormGroup>\n  );\n}\n","import React, { ChangeEvent, FocusEvent } from 'react';\nimport { FormGroup, TextField } from '@mui/material';\nimport { useFormikContext } from 'formik';\nimport ErrorField from './ErrorField';\n\ninterface ITextInputFieldProps {\n  inputGroupStyle?: { [p: string]: string };\n  textInputStyle?: { [p: string]: string };\n  helperStyle?: { [p: string]: string };\n  fullWidth?: boolean;\n  size?: 'small' | 'medium';\n  onChange: (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  onBlur?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  value: string | number | boolean;\n  name: string;\n  label: string;\n\n  [p: string]: any;\n}\n\nfunction TextInputField(props: ITextInputFieldProps) {\n  const { errors, touched } = useFormikContext();\n\n  return (\n    <FormGroup sx={props.inputGroupStyle}>\n      <TextField\n        size={props.size}\n        onBlur={props.onBlur}\n        sx={props.textInputStyle}\n        fullWidth={props.fullWidth}\n        // @ts-ignore\n        error={errors[props.name] && touched[props.name]}\n        {...props}\n      />\n      <ErrorField\n        helperStyle={props.helperStyle}\n        // @ts-ignore\n        message={errors[props.name]}\n        // @ts-ignore\n        hasError={errors[props.name] && touched[props.name]}\n      />\n    </FormGroup>\n  );\n}\n\nexport default TextInputField;\n","import { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store';\n\nconst useAppDispatch: () => AppDispatch = useDispatch;\n\nexport default useAppDispatch;\n","import * as Yup from 'yup';\n\nexport interface IGarageSignupModel {\n  firstName: string;\n  lastName: string;\n  name: string;\n  email: string;\n  phone: string;\n  dialCode: string;\n  state: string;\n  isRegistered: boolean;\n}\n\nconst fields = {\n  firstName: {\n    name: 'firstName',\n    label: 'First Name*',\n    error: {\n      invalid: 'Invalid First Name.',\n      required: 'First Name is required.',\n    },\n  },\n  lastName: {\n    name: 'lastName',\n    label: 'Last Name*',\n    error: {\n      invalid: `Invalid Last Name.`,\n      required: 'Last Name is required.',\n    },\n  },\n  name: {\n    name: 'name',\n    label: 'Your Workshop/Business Name*',\n    error: {\n      invalid: 'Invalid Workshop/Business Name.',\n      required: 'Workshop/Business Name is required.',\n    },\n  },\n  email: {\n    name: 'email',\n    label: 'Your Email address*',\n    error: {\n      invalid: 'Invalid email.',\n      required: 'Email is required.',\n    },\n  },\n  phone: {\n    name: 'phone',\n    label: 'Phone Number*',\n    error: {\n      invalid: `Invalid Phone Number.`,\n      required: `Invalid Phone Number.`,\n    },\n  },\n  dialCode: {\n    name: 'dialCode',\n    label: 'Dial Code*',\n    error: {\n      invalid: `Invalid Dial Code`,\n      required: `Invalid Dial Code`,\n    },\n  },\n\n  state: {\n    name: 'state',\n    label: 'What state is your workshop located*',\n    error: {\n      invalid: `Invalid State selected`,\n      required: 'State is required',\n    },\n  },\n  isRegistered: {\n    name: 'isRegistered',\n    label: 'My workshop is legally registered',\n    error: {\n      invalid: `Passwords do not match`,\n      required: 'You must check this option',\n    },\n  },\n};\n\nconst initialValues: IGarageSignupModel = {\n  email: '',\n  firstName: '',\n  lastName: '',\n  phone: '',\n  dialCode: '',\n  name: '',\n  state: '',\n  isRegistered: false,\n};\n\nconst schema = Yup.object().shape({\n  [fields.firstName.name]: Yup.string()\n    .max(80, fields.firstName.error.invalid)\n    .label(fields.firstName.label)\n    .required(fields.firstName.error.required),\n  [fields.lastName.name]: Yup.string()\n    .max(80, fields.lastName.error.invalid)\n    .label(fields.lastName.label)\n    .required(fields.lastName.error.required),\n  [fields.name.name]: Yup.string().required(fields.name.error.required).label(fields.name.label),\n  [fields.email.name]: Yup.string()\n    .email(fields.email.error.invalid)\n    .label(fields.email.label)\n    .required(fields.email.error.required),\n  [fields.phone.name]: Yup.string()\n    .length(11, fields.phone.error.invalid)\n    .required(fields.phone.error.required)\n    .label(fields.phone.label),\n  [fields.dialCode.name]: Yup.string().required(fields.dialCode.error.required).label(fields.dialCode.label),\n  [fields.state.name]: Yup.string().label(fields.state.label).required(fields.state.error.required),\n  [fields.isRegistered.name]: Yup.boolean()\n    .oneOf([true], fields.isRegistered.error.required)\n    .label(fields.isRegistered.label)\n    .required(fields.isRegistered.error.required),\n});\n\nconst garageSignUpModel = {\n  fields,\n  initialValues,\n  schema,\n};\n\nexport default garageSignUpModel;\n","import React, { ChangeEvent } from 'react';\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText } from '@mui/material';\nimport { useFormikContext } from 'formik';\n\ninterface ICheckboxFieldProps {\n  inputGroupStyle?: { [p: string]: string };\n  textInputStyle?: { [p: string]: string };\n  helperStyle?: { [p: string]: string };\n  fullWidth?: boolean;\n  required?: boolean;\n  size?: 'small' | 'medium';\n  value: boolean;\n  name: string;\n  label: string;\n}\n\nfunction CheckboxField(props: ICheckboxFieldProps) {\n  const { errors, touched, setFieldValue } = useFormikContext();\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setFieldValue(props.name, e.target.checked);\n  };\n\n  const hasError = () =>\n    //@ts-ignore\n    errors[props.name] !== undefined && touched[props.name];\n\n  return (\n    <FormControl\n      required={props.required}\n      fullWidth={props.fullWidth}\n      error={hasError()}\n      component=\"fieldset\"\n      variant=\"standard\">\n      <FormGroup>\n        <FormControlLabel\n          control={<Checkbox size={props.size} checked={props.value} onChange={handleChange} name={props.name} />}\n          label={props.label}\n        />\n      </FormGroup>\n      {\n        //@ts-ignore\n        hasError() && <FormHelperText>{errors[props.name]}</FormHelperText>\n      }\n    </FormControl>\n  );\n}\n\nexport default CheckboxField;\n","import React, { useEffect, useState } from 'react';\nimport { Form, useFormikContext } from 'formik';\nimport { Grid, Typography } from '@mui/material';\nimport TextInputField from '../fields/TextInputField';\nimport garageSignUpModel, { IGarageSignupModel } from '../models/garageSignUpModel';\nimport SelectField, { ISelectData } from '../fields/SelectField';\nimport CheckboxField from '../fields/CheckboxField';\nimport { LoadingButton } from '@mui/lab';\nimport { Link } from 'react-router-dom';\nimport { DIAL_CODES, STATES } from '../../../config/constants';\nimport './signInForms.css'\n\ninterface Props {\n  isSubmitting?: boolean;\n}\n\nconst { fields } = garageSignUpModel;\n\nfunction GarageSignUpForm(props: Props) {\n  const [states, setStates] = useState<ISelectData[]>([]);\n  const [dialCodes, setDialCodes] = useState<ISelectData[]>([]);\n\n  const { handleChange, values } = useFormikContext<IGarageSignupModel>();\n\n  useEffect(() => {\n    const newStates = STATES.map(state => ({\n      label: state.name,\n      value: state.name,\n    }));\n\n    const newDialCodes = DIAL_CODES.filter(code => code.name === 'Nigeria').map(dialCode => ({\n      value: dialCode.dial_code,\n      label: `${dialCode.emoji} ${dialCode.dial_code}`,\n    }));\n\n    setStates(newStates);\n    setDialCodes(newDialCodes);\n  }, []);\n\n  return (\n    <Form autoComplete=\"off\" className=\"formContainer\">\n      <Grid container direction=\"column\">\n        <Grid item container xs={12} columnSpacing={2}>\n          <Grid item xs={6}>\n            <TextInputField\n              margin=\"normal\"\n              onChange={handleChange}\n              value={values.firstName}\n              name={fields.firstName.name}\n              label={fields.firstName.label}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TextInputField\n              margin=\"normal\"\n              onChange={handleChange}\n              value={values.lastName}\n              name={fields.lastName.name}\n              label={fields.lastName.label}\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <TextInputField\n            margin=\"normal\"\n            onChange={handleChange}\n            value={values.name}\n            name={fields.name.name}\n            label={fields.name.label}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextInputField\n            margin=\"normal\"\n            onChange={handleChange}\n            value={values.email}\n            name={fields.email.name}\n            label={fields.email.label}\n            type=\"email\"\n          />\n        </Grid>\n        <Grid item container xs={12} spacing={1} my={1}>\n          <Grid item xs={3}>\n            <SelectField\n              onChange={handleChange}\n              value={values.dialCode}\n              name={fields.dialCode.name}\n              label={fields.dialCode.label}\n              data={dialCodes}\n            />\n          </Grid>\n          <Grid item xs={9}>\n            <TextInputField\n              onChange={handleChange}\n              value={values.phone}\n              name={fields.phone.name}\n              label={fields.phone.label}\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12} my={2}>\n          <SelectField\n            onChange={handleChange}\n            value={values.state}\n            name={fields.state.name}\n            label={fields.state.label}\n            data={states}\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={12} my={1}>\n          <CheckboxField\n            required\n            value={values.isRegistered}\n            name={fields.isRegistered.name}\n            label={fields.isRegistered.label}\n          />\n        </Grid>\n\n        <Grid item container xs spacing={2} justifyContent=\"space-between\" alignItems=\"center\">\n          <Grid item xs={6}>\n            <Link style={{ color: '#FBA91A' }} to=\"/garage/login\">\n              Sign in instead\n            </Link>\n          </Grid>\n          <Grid item>\n            <LoadingButton\n              loading={props.isSubmitting}\n              disabled={props.isSubmitting}\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"warning\"\n              size=\"large\">\n              Proceed\n            </LoadingButton>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12} mt={5}>\n          <Typography textAlign=\"center\">\n            By clicking ‘Proceed’ you agree with the AutoHyve Terms and Policies\n          </Typography>\n        </Grid>\n      </Grid>\n    </Form>\n  );\n}\n\nexport default GarageSignUpForm;\n","import React, { useEffect, useState } from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport PublicLayout from '../../components/layouts/PublicLayout';\nimport logoLogin from '../../assets/images/logoLogin.png';\nimport { Box, Typography } from '@mui/material';\n\nimport './signInForm.css';\nimport GarageSignUpForm from '../../components/forms/authentication/GarageSignUpForm';\nimport garageSignUpModel, { IGarageSignupModel } from '../../components/forms/models/garageSignUpModel';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport { CustomHookMessage } from '@app-types';\nimport AppLoader from '../../components/loader/AppLoader';\nimport AppAlert from '../../components/alerts/AppAlert';\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport { garageSignUpAction } from '../../store/actions/authenicationActions';\n\nconst { schema, initialValues } = garageSignUpModel;\n\nfunction GarageSignUpPage() {\n  const [success, setSuccess] = useState<CustomHookMessage>();\n  const [error, setError] = useState<CustomHookMessage>();\n\n  const authenticationReducer = useAppSelector(state => state.authenticationReducer);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (authenticationReducer.garageSignUpStatus === 'failed') {\n      setError({ message: authenticationReducer.garageSignUpError });\n    }\n  }, [authenticationReducer.garageSignUpError, authenticationReducer.garageSignUpStatus]);\n\n  useEffect(() => {\n    if (authenticationReducer.garageSignUpStatus === 'completed') {\n      setSuccess({ message: authenticationReducer.garageSignUpSuccess });\n    }\n  }, [authenticationReducer.garageSignUpSuccess, authenticationReducer.garageSignUpStatus]);\n\n  const handleSubmit = (values: IGarageSignupModel, helpers: FormikHelpers<IGarageSignupModel>) => {\n    void dispatch(garageSignUpAction(values));\n    helpers.resetForm();\n  };\n  return (\n    <PublicLayout>\n      <img src={logoLogin} alt=\"\" className=\"loginLogo\" />\n      <Box sx={{ mb: 3 }}>\n        <Typography textAlign=\"center\" sx={headTextStyle}>\n          Create your AutoHyve Account\n        </Typography>\n        <Typography textAlign=\"center\" variant=\"subtitle2\">\n          To continue to your AutoHyve Workshop Profile\n        </Typography>\n      </Box>\n      <Formik validationSchema={schema} initialValues={initialValues} onSubmit={handleSubmit}>\n        <GarageSignUpForm />\n      </Formik>\n      <AppAlert\n        alertType=\"error\"\n        show={error !== undefined}\n        message={error?.message}\n        onClose={() => setError(undefined)}\n      />\n      <AppAlert\n        alertType=\"success\"\n        show={success !== undefined}\n        message={success?.message}\n        onClose={() => setSuccess(undefined)}\n      />\n      <AppLoader show={authenticationReducer.garageSignUpStatus === 'loading'} />\n    </PublicLayout>\n  );\n}\n\nconst headTextStyle = {\n  fontFamily: 'Poppins',\n  fontStyle: 'normal',\n  fontWeight: '400',\n  fontSize: '20px',\n  mb: '10px',\n};\n\nexport default GarageSignUpPage;\n"],"names":["forwardRef","props","ref","Slide","direction","AppAlert","duration","Snackbar","anchorOrigin","vertical","horizontal","open","show","autoHideDuration","onClose","TransitionComponent","TransitionLeft","Alert","variant","severity","alertType","sx","width","message","style","color","hasError","helperStyle","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","SelectField","useFormikContext","errors","touched","inputGroupStyle","fullWidth","error","name","id","label","disabled","textInputStyle","size","labelId","multiple","value","onChange","data","map","item","index","onClick","onBlur","useAppDispatch","useDispatch","fields","firstName","invalid","required","lastName","email","phone","dialCode","state","isRegistered","initialValues","schema","Yup","shape","max","length","oneOf","setFieldValue","undefined","FormControl","component","FormGroup","FormControlLabel","control","Checkbox","checked","e","target","FormHelperText","garageSignUpModel","useState","states","setStates","dialCodes","setDialCodes","handleChange","values","useEffect","newStates","STATES","newDialCodes","DIAL_CODES","code","dial_code","emoji","autoComplete","className","Grid","container","xs","columnSpacing","TextInputField","margin","type","spacing","my","justifyContent","alignItems","to","LoadingButton","loading","isSubmitting","mt","Typography","textAlign","headTextStyle","fontFamily","fontStyle","fontWeight","fontSize","mb","success","setSuccess","setError","authenticationReducer","useAppSelector","dispatch","garageSignUpStatus","garageSignUpError","garageSignUpSuccess","PublicLayout","src","logoLogin","alt","Box","validationSchema","onSubmit","helpers","garageSignUpAction","resetForm","AppLoader"],"sourceRoot":""}